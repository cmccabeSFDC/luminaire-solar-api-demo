#!/usr/bin/env node

import {
  S3Client,
  PutObjectCommand,
  GetObjectCommand,
} from '@aws-sdk/client-s3';
import { getSignedUrl } from '@aws-sdk/s3-request-presigner';

const fileName = `${Date.now()}.png`;

// Parse S3 URL in the format s3://bucket-name/key
function parseS3Url(url) {
  const s3Regex = /^s3:\/\/([^/]+)\/(.+)$/;
  const match = url.match(s3Regex);
  if (!match) {
    throw new Error('Invalid S3 URL format. Expected: s3://bucket-name/key');
  }
  return {
    bucket: match[1],
    key: match[2],
  };
}

async function uploadAndGetPresignedUrl() {
  // Get S3 URL from environment variable or argument
  const storeUrl = process.env.STORE_URL;
  if (!storeUrl) {
    console.error(
      'Please set STORE_URL environment variable (format: s3://bucket-name/key)'
    );
    process.exit(1);
  }
  const { bucket, key } = parseS3Url(storeUrl);
  const client = new S3Client({
    region: process.env.STORE_REGION,
    credentials: {
      accessKeyId: process.env.STORE_ACCESS_KEY_ID,
      secretAccessKey: process.env.STORE_SECRET_ACCESS_KEY,
    },
  });

  const chunks = [];
  // Ensure stdin is in binary mode
  process.stdin.resume();
  process.stdin.setEncoding('binary');

  try {
    const data = await new Promise((resolve, reject) => {
      // Handle incoming data
      process.stdin.on('data', (chunk) => {
        chunks.push(Buffer.from(chunk, 'binary'));
      });

      // Resolve when the stream ends
      process.stdin.on('end', () => {
        resolve(Buffer.concat(chunks));
      });

      // Handle errors
      process.stdin.on('error', (err) => {
        reject(err);
      });
    });

    // Upload the file
    const uploadCommand = new PutObjectCommand({
      Bucket: bucket,
      Key: key + '/' + fileName,
      Body: data,
      ContentType: 'image/png',
    });
    await client.send(uploadCommand);

    // Generate presigned URL for GET
    const getCommand = new GetObjectCommand({
      Bucket: bucket,
      Key: key + '/' + fileName,
      ContentType: 'image/png',
    });
    const presignedUrl = await getSignedUrl(client, getCommand, {
      expiresIn: 48 * 3600, // 48 hours in seconds
    });

    // Output only the URL to stdout
    process.stdout.write(presignedUrl);
  } catch (error) {
    console.error(error);
    process.exit(1);
  }
}

uploadAndGetPresignedUrl();
